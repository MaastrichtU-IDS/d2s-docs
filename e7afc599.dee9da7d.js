(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{121:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),o=(n(0),n(128)),i={id:"workflow-github",title:"Run workflows"},l={unversionedId:"workflow-github",id:"workflow-github",isDocsHomePage:!1,title:"Run workflows",description:"We use GitHub Actions to automatically run the different part of the workflow in a reproducible way:",source:"@site/docs/workflow-github.md",slug:"/workflow-github",permalink:"/docs/workflow-github",editUrl:"https://github.com/MaastrichtU-IDS/d2s-docs/edit/master/website/docs/workflow-github.md",version:"current",lastUpdatedBy:"Vincent Emonet",lastUpdatedAt:1610634692,sidebar:"docs",previous:{title:"Use Python",permalink:"/docs/use-python"},next:{title:"Store RDF data",permalink:"/docs/store-rdf"}},c=[{value:"Automate data processing and loading",id:"automate-data-processing-and-loading",children:[]},{value:"Test Actions locally",id:"test-actions-locally",children:[]}],s={toc:c};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"We use GitHub Actions to automatically run the different part of the workflow in a reproducible way:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Run Python script (to directly generate RDF, or perform preprocessing of the data for RML)"),Object(o.b)("li",{parentName:"ul"},"Run the RML mapper to generate the RDF data, if applicable"),Object(o.b)("li",{parentName:"ul"},"Upload the generated RDF file to the SPARQL endpoint"),Object(o.b)("li",{parentName:"ul"},"Generate and publish descriptive statistics for the published data"),Object(o.b)("li",{parentName:"ul"},"Define credentials as GitHub secrets (API keys, username, password)")),Object(o.b)("h3",{id:"automate-data-processing-and-loading"},"Automate data processing and loading"),Object(o.b)("p",null,"RDF data can be automatically generated and loaded using GitHub Actions workflows."),Object(o.b)("p",null,"See ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/MaastrichtU-IDS/food-claims-kg/blob/master/.github/workflows/generate-rdf.yml"}),"this workflow")," to generate data using a simple ",Object(o.b)("inlineCode",{parentName:"p"},"convert_to_rdf.py")," file and load it in the triplestore"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Download input file from Google Docs and run python script to generate RDF")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'    - name: Install Python dependencies\n      run: |\n        python -m pip install -r requirements.txt\n    - name: Download CSV files from Google docs\n      run: |\n        mkdir -p data/output\n        wget -O data/food-claims-kg.xlsx "https://docs.google.com/spreadsheets/d/1RWZ6AlGB8m7PO5kjsbbbeI4ETLwvKLOvkrzOpl8zAM8/export?format=xlsx&id=1RWZ6AlGB8m7PO5kjsbbbeI4ETLwvKLOvkrzOpl8zAM8"\n    - name: Run Python script to generate RDF\n      run: |\n        python src/convert_to_rdf.py\n')),Object(o.b)("ol",{start:2},Object(o.b)("li",{parentName:"ol"},"Optional: clear existing graph")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'    - name: Clear existing graph\n      uses: vemonet/sparql-operations-action@v1\n      with:\n        query: "CLEAR GRAPH <https://w3id.org/foodkg/graph>"\n        endpoint: https://graphdb.dumontierlab.com/repositories/FoodHealthClaimsKG/statements\n        user: ${{ secrets.GRAPHDB_USER }}\n        password: ${{ secrets.GRAPHDB_PASSWORD }}\n')),Object(o.b)("ol",{start:3},Object(o.b)("li",{parentName:"ol"},"Load RDF file previously generated by the workflow in ",Object(o.b)("inlineCode",{parentName:"li"},"data/output/food_health_kg.ttl")," for the example")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'    - name: Import RDF files in the triplestore\n      uses: MaastrichtU-IDS/RdfUpload@master\n      with:\n        file: data/output/food_health_kg.ttl\n        endpoint: https://graphdb.dumontierlab.com/repositories/FoodHealthClaimsKG/statements\n        user: ${{ secrets.GRAPHDB_USER }}\n        password: ${{ secrets.GRAPHDB_PASSWORD }}\n        graph: "https://w3id.org/foodkg/graph"\n')),Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"Secrets")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"You will need to define those 2 secrets in your GitHub repository workflows secrets: ",Object(o.b)("inlineCode",{parentName:"p"},"GRAPHDB_USER")," and ",Object(o.b)("inlineCode",{parentName:"p"},"GRAPHDB_PASSWORD")))),Object(o.b)("h2",{id:"test-actions-locally"},"Test Actions locally"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/nektos/act"}),"Act")," allows to run GitHub Actions workflows directly on your local machine to test."),Object(o.b)("p",null,"Provide a specific image and run a specific job:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"act -P ubuntu-latest=nektos/act-environments-ubuntu:18.04 -j generate-rdf\n")))}p.isMDXComponent=!0},128:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),p=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=p(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=p(n),u=a,m=b["".concat(i,".").concat(u)]||b[u]||d[u]||o;return n?r.a.createElement(m,l(l({ref:t},s),{},{components:n})):r.a.createElement(m,l({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);