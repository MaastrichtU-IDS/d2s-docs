(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{137:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),l=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),b=r,m=u["".concat(o,".").concat(b)]||u[b]||d[b]||i;return n?a.a.createElement(m,s(s({ref:t},p),{},{components:n})):a.a.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},90:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return l}));var r=n(3),a=n(7),i=(n(0),n(137)),o={id:"guide-jenkins",title:"Experimental Jenkins workflows"},s={unversionedId:"guide-jenkins",id:"guide-jenkins",isDocsHomePage:!1,title:"Experimental Jenkins workflows",description:"Proof of concept: execute data2services modules by deploying Jenkins pipelines.",source:"@site/docs/guide-jenkins.md",slug:"/guide-jenkins",permalink:"/docs/guide-jenkins",editUrl:"https://github.com/MaastrichtU-IDS/d2s-docs/edit/master/website/docs/guide-jenkins.md",version:"current",lastUpdatedBy:"Vincent Emonet",lastUpdatedAt:1610982731,sidebar:"docs",previous:{title:"Docker guide",permalink:"/docs/guide-docker"},next:{title:"Setting up GraphDB",permalink:"/docs/guide-graphdb"}},c=[{value:"Start Jenkins",id:"start-jenkins",children:[]},{value:"Design a pipeline",id:"design-a-pipeline",children:[]}],p={toc:c};function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Proof of concept"),": execute data2services modules by deploying ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://jenkins.io/"}),"Jenkins pipelines"),"."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Not supported anymore.")),Object(i.b)("h2",{id:"start-jenkins"},"Start Jenkins"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"docker run -it --name jenkins-container \\\n  -p 3333:8080  \\\n  -v /data/jenkins:/data \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  deepakunni3/ncats-jenkins \n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Access at ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"http://localhost:3333"}),"http://localhost:3333"))),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Check ",Object(i.b)("inlineCode",{parentName:"p"},"GitHub plugin")," to install it")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Jenkins Home directory in ",Object(i.b)("inlineCode",{parentName:"p"},"/var/jenkins_home"))),Object(i.b)("h2",{id:"design-a-pipeline"},"Design a pipeline"),Object(i.b)("p",null,"You can find a ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/NCATS-Tangerine/ncats-kg-release-pipeline/tree/red-kg-validation"}),"simple pipeline")," executing Docker containers to validate a knowledge graph."),Object(i.b)("p",null,"Here an example of a simple pipeline to build a Docker image and execute a SPARQL query using this image."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-groovy"}),"pipeline {\n  agent any\n  parameters {\n    string(name: 'GraphUri', defaultValue: 'https://w3id.org/data2services/graph/biolink/date', description: 'URI of the Graph to validate')\n    string(name: 'SparqlRepositoryUri', defaultValue: 'https://graphdb.dumontierlab.com/repositories/public/statements', description: 'URI of the repository used to insert the computed statistics')\n    string(name: 'TriplestoreUsername', defaultValue: 'import_user', description: 'Username for the triplestore')\n    string(name: 'TriplestorePassword', defaultValue: 'changeme', description: 'Password for the triplestore')\n  }\n  stages {\n    stage('Build and install') {\n      steps {\n        sh \"git clone --recursive https://github.com/MaastrichtU-IDS/d2s-transform-repository.git\"\n        sh 'docker pull umids/d2s-sparql-operations'\n      }\n    }\n    stage('Compute and insert statistics') {\n      steps {\n        sh \"docker run -t --rm --volumes-from jenkins-container umids/d2s-sparql-operations -rq '$WORKSPACE/d2s-transform-repository/sparql/compute-statistics' -url '${params.SparqlRepositoryUri}' -un ${params.TriplestoreUsername} -pw ${params.TriplestorePassword} --var-input:${params.GraphUri}\"\n      }\n    }\n  }\n  post {\n    always {\n      //archiveArtifacts artifacts: 'results/*', onlyIfSuccessful: true // archive contents in results folder\n      deleteDir()\n      cleanWs()\n    }\n  }\n}\n")))}l.isMDXComponent=!0}}]);